-- STEP 1. CREATE THE FOLLOWING TABLES

CREATE TABLE WORKER (
	WORKER_ID SERIAL PRIMARY KEY,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT,
	JOINING_DATE DATE,
	DEPARTMENT CHAR(25)
);

CREATE TABLE BONUS (
	BONUS_ID INT,
	BONUS_AMOUNT INT,
	BONUS_DATE DATE,
	FOREIGN KEY (BONUS_ID) REFERENCES WORKER(WORKER_ID) ON DELETE CASCADE
);

CREATE TABLE TITLE (
	TITLE_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATE,
	FOREIGN KEY (TITLE_ID)
		REFERENCES WORKER(WORKER_ID)
        ON DELETE CASCADE
);

-- STEP 2. FILL THE TABLE WITH THE TEST DATAS (EACH TABLE MUST HAVE 20 ENTRIES)

-- -- HAVE 20 ENTRIES
INSERT INTO WORKER
		(FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT ) 
		VALUES 
		('ANNNORA','MCCARTNEY', 25000 ,CURRENT_TIMESTAMP, 'MARKETING');

-- -- HAVE 20 ENTRIES
INSERT INTO BONUS 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) 
  VALUES
	(1, 5000, CURRENT_TIMESTAMP);

-- HAVE 20 ENTRIES
INSERT INTO TITLE 
	(TITLE_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
	(1, 'MANAGER', CURRENT_TIMESTAMP);

-- STEP 3. COMPLETE 50 TASKS

-- 1 
  SELECT FIRST_NAME AS WORKER_NAMES FROM WORKER;
-- 2
  SELECT UPPER(FIRST_NAME) FROM WORKER;
-- 3
  SELECT DISTINCT DEPARTMENT FROM WORKER; --  ИСКЛЮЧАЕТ СТРОКИ СОВПАДАЮЩИЕ ПО ВСЕМ УКАЗАННЫМ ВЫРАЖЕНИЯМ
-- 4
  SELECT SUBSTRING(FIRST_NAME,1,3) FROM WORKER;
-- 5
  SELECT POSITION('G' IN 'GETTIKA') AS WORKER;
-- 6
  SELECT RTRIM(FIRST_NAME) FROM WORKER; -- УДАЛЕНИЯ ПРОБЕЛОВ С ПРАВОЙ СТОРОНЫ
-- 7
  SELECT LTRIM(FIRST_NAME) FROM WORKER; -- УДАЛЕНИЯ ПРОБЕЛОВ С ЛЕВОЙ СТОРОНЫ
-- 8
  SELECT DISTINCT LENGTH(DEPARTMENT) FROM WORKER;
-- 9
  SELECT REPLACE(FIRST_NAME,'A','A') FROM WORKER;
-- 10
  SELECT CONCAT(FIRST_NAME, ' ', LAST_NAME) AS COMPLETE_NAME FROM WORKER;
-- 11
  SELECT * FROM WORKER ORDER BY FIRST_NAME ASC;
-- 12
  SELECT * FROM WORKER ORDER BY FIRST_NAME ASC, DEPARTMENT DESC;
-- 13
  SELECT * FROM WORKER WHERE FIRST_NAME IN ('CECIL', 'DAMIEN');
-- 14
  SELECT * FROM WORKER WHERE FIRST_NAME NOT IN ('CECIL', 'DAMIEN');
-- 15
  SELECT * FROM WORKER WHERE DEPARTMENT LIKE 'ADMIN%';
-- 16
  SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%A%';
-- 17
  SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%A';
-- 18
  SELECT * FROM WORKER WHERE FIRST_NAME LIKE '_______H';
-- 19
  SELECT * FROM WORKER WHERE SALARY BETWEEN 100000 AND 500000;
-- 20
  SELECT * FROM WORKER WHERE TO_CHAR(JOINING_DATE, 'MON') = 'MAR'
-- 21
  SELECT COUNT(*) FROM WORKER WHERE DEPARTMENT = 'ADMIN'
-- 22
  SELECT FIRST_NAME, LAST_NAME, SALARY FROM WORKER WHERE SALARY BETWEEN 50000 AND 100000
-- 23
  SELECT DEPARTMENT, COUNT(WORKER_ID) NUM_OF_WORKERS FROM WORKER GROUP BY DEPARTMENT ORDER BY NUM_OF_WORKERS DESC;
-- 24
  SELECT DISTINCT W.FIRST_NAME, T.WORKER_TITLE FROM WORKER W INNER JOIN TITLE T ON W.WORKER_ID = T.TITLE_ID AND T.WORKER_TITLE IN ('MANAGER')
-- 25
  SELECT WORKER_TITLE, AFFECTED_FROM, COUNT(*) FROM TITLE GROUP BY WORKER_TITLE, AFFECTED_FROM HAVING COUNT(*) > 1;
-- 26
  SELECT * FROM WORKER WHERE MOD(WORKER_ID, 2) <> 0; -- НЕ ЧЕТНЫЕ СТРОКИ
-- 27
  SELECT * FROM WORKER WHERE MOD (WORKER_ID, 2) = 0; -- ЧЕТНЫЕ СТРОКИ
-- 28
  SELECT * INTO WORKERCLONE FROM WORKER; --CLONE TABLE
-- 29
  (SELECT * FROM WORKER) INTERSECT (SELECT * FROM WORKERCLONE);
-- 30
  SELECT * FROM WORKER MINUS SELECT * FROM TITLE;
-- 31
  SELECT CURRENT_DATE;
-- 32
  SELECT * FROM WORKER ORDER BY SALARY DESC LIMIT 10
-- 33
  SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT 5;
-- 34
  SELECT SALARY FROM WORKER W1 WHERE 4 = (SELECT COUNT( DISTINCT ( W2.SALARY ) )FROM WORKER W2 WHERE W2.SALARY >= W1.SALARY);
-- 35
SELECT DISTINCT W.WORKER_ID, W.FIRST_NAME, W.SALARY FROM WORKER W, WORKER W1 WHERE W.SALARY = W1.SALARY AND W.WORKER_ID != W1.WORKER_ID;
-- 36
SELECT MAX(SALARY) FROM WORKER WHERE SALARY NOT IN (SELECT MAX(SALARY) FROM WORKER);
-- 37
SELECT FIRST_NAME, DEPARTMENT FROM WORKER W WHERE W.DEPARTMENT='HR' 
UNION ALL 
SELECT FIRST_NAME, DEPARTMENT FROM WORKER W1 WHERE W1.DEPARTMENT='HR';
-- 38
(SELECT * FROM WORKER)
INTERSECT
(SELECT * FROM WORKERCLONE);
-- 39
SELECT * FROM WORKER WHERE WORKER_ID <= (SELECT COUNT(WORKER_ID)/2 FROM WORKER);
-- 40
SELECT DEPARTMENT, COUNT(WORKER_ID) AS NUMBER_OF_WORKERS FROM WORKER GROUP BY DEPARTMENT HAVING COUNT(WORKER_ID) < 5;
-- 41
SELECT DEPARTMENT, COUNT(DEPARTMENT) AS NUMBER_OF_WORKERS FROM WORKER GROUP BY DEPARTMENT;
-- 42
SELECT * FROM WORKER WHERE WORKER_ID = (SELECT MAX(WORKER_ID) FROM WORKER);
-- 43
SELECT * FROM WORKER WHERE WORKER_ID = (SELECT MIN(WORKER_ID) FROM WORKER);
-- 44
SELECT * FROM WORKER WHERE WORKER_ID <=5 UNION SELECT * FROM (SELECT * FROM WORKER W ORDER BY W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID <=5;
-- 45
SELECT T.DEPARTMENT,T.FIRST_NAME,T.SALARY FROM(SELECT MAX(SALARY) AS TOTALSALARY,DEPARTMENT FROM WORKER GROUP BY DEPARTMENT) AS TEMPNEW  INNER JOIN WORKER T ON TEMPNEW.DEPARTMENT=T.DEPARTMENT AND TEMPNEW.TOTALSALARY=T.SALARY;
-- 46
SELECT DISTINCT SALARY FROM WORKER A WHERE 3 >= (SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY <= B.SALARY) ORDER BY A.SALARY DESC;
-- 47
SELECT DISTINCT SALARY FROM WORKER A WHERE 3 >= (SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY >= B.SALARY) ORDER BY A.SALARY DESC;
-- 48
SELECT DISTINCT SALARY FROM WORKER A WHERE 6 >= (SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY <= B.SALARY) ORDER BY A.SALARY DESC
-- 49
 SELECT DEPARTMENT, SUM(SALARY) FROM WORKER GROUP BY DEPARTMENT;
-- 50
SELECT FIRST_NAME, SALARY FROM WORKER WHERE SALARY=(SELECT MAX(SALARY) FROM WORKER);


